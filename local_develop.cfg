# This is a locally used development-buildout (no zeo with some useful
# tools) common to all sites.

[buildout]
# If you want you can have your eggs picked
# allow-picked-versions = true

sources-dir = src-mrd

# Locally you might want some nice development addons:
eggs +=
    plone.app.debugtoolbar
#    Products.DocFinderTab
    Products.PrintingMailHost
    plone.reload
    pdbpp
# Post-mortem debugging
    Products.PDBDebugMode

test-eggs +=
    pdbpp

zcml +=

parts +=
    instance
    test
    coverage
    coverage-test
    packages
    zopepy
    checkversions
    ploneversioncheck
    i18ndude
#    i18nize-XXX
#    i18nize-all
    mrbob
    robot

extensions +=
    plone.versioncheck

[ports]
base            = 80
cache           = ${:base}80
loadbalancer    = ${:base}81
zeoclient1      = ${:base}82
zeoclient2      = ${:base}83
zeoclient_debug = ${:base}84
zeoserver       = ${:base}90
instance        = 8080

[bindips]
instance        = 0.0.0.0
zeoserver       = 127.0.0.1
cache           = 127.0.0.1
loadbalancer    = 127.0.0.1
zeoclient1      = 127.0.0.1
zeoclient2      = 127.0.0.1
zeoclient_debug = 127.0.0.1

[instance]
recipe = plone.recipe.zope2instance
user = ${buildout:login}:${buildout:password}
wsgi = on
http-address = ${ports:instance}
ip-address = ${bindips:instance}
debug-mode = on
verbose-security = on
eggs = ${buildout:eggs}
zcml = ${buildout:zcml}
environment-vars = ${buildout:prod-environment}
resources = ${buildout:directory}/resources
http-fast-listen = on
zodb-temporary-storage = off

[test]
recipe = zc.recipe.testrunner
eggs =
    Plone
    ${buildout:test-eggs}
defaults = ['--auto-color', '--auto-progress', '-vvv']

[coverage]
recipe = zc.recipe.egg
eggs = coverage

[coverage-test]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    export TZ=UTC
    # Remove old results
    echo "Erase old coverage results."
    ${buildout:directory}/bin/coverage erase
    # Collect test coverage results for all packages
    echo "Run test coverage analysis for all packages."
    ${buildout:directory}/bin/coverage run bin/test $*
    echo "Create test coverage report."
    # Combine all package analysis
    bin/coverage combine
    ${buildout:directory}/bin/coverage report -m
    # Generates a "coverage.xml" file that Jenkins can read and process from the
    # ".coverage" file that the coverage report created.
    ${buildout:directory}/bin/coverage html -i
    echo "Test coverage report finished. See parts/test/htmlreport/index.html"
output = ${buildout:directory}/bin/coverage-test
mode = 755

[packages]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}

[zopepy]
recipe = zc.recipe.egg
eggs = ${buildout:eggs}
       plone.staticresources
interpreter = zopepy

[checkversions]
recipe = zc.recipe.egg
eggs = z3c.checkversions [buildout]

[ploneversioncheck]
recipe = zc.recipe.egg
eggs = plone.versioncheck

[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs =
    i18ndude

[i18nize-base]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/i18nize.in
mode = 775
dollar = $
languages = ${buildout:languages}

#[i18nize-XXX]
#<=i18nize-base
#output = ${buildout:bin-directory}/i18nize-XXX
#domain = XXX.XXX
#packagepath = ${buildout:directory}/src/XXX.XXX/src/XXX/XXX

[i18nize-all]
recipe = collective.recipe.template
mode = 775
input = inline:
    #!/bin/bash
    ${:update_po_command}
output = ${buildout:bin-directory}/i18nize_all
update_po_command = ${i18nize-xxx:output}
#update_po_command = ${i18nize-site:output} && ${i18nize-theme:output}

[mrbob]
recipe = zc.recipe.egg
eggs =
    mr.bob
    bobtemplates.plone

[robot]
recipe = zc.recipe.egg
eggs =
    Pillow
    ${test:eggs}
    plone.app.robotframework[debug,reload]
scripts =
    robot-server
    robot
